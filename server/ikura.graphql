# Zef.SchemaVersion: v1
# Zef.Authentication: {"Algo": "HS256", "VerificationKey": "2c3432fba16d204318282d820959521efcd43fa1f3d75abb9ec31e902c65f981", "Audience": "ikura.app", "Header": "X-Auth-Token"}

type User
  @auth(
    add: """
    (info.context | tap[print] | get_in[('auth', 'admin')][False])
    """
    query: """
    (z >> RT.Email
    | value
    | equals[info.context
            | get_in[('auth', 'email')][None]
            | collect])
    """
  )
  @upfetch(field: "email") {
  sub: String
  email: String! @unique @search
  givenName: String
  familyName: String
  phone: String
  birthday: DateTime
  transactions: [Transaction]
    @incoming
    @relation(source: "Transaction", rt: "User", target: "User")
}

type Transaction
  @auth(
    query: """
    (z >> RT.User >> RT.Email
    | value
    | equals[info.context
            | get_in[('auth', 'email')][None]
            | collect])
    """
  ) {
  user: User @relation(source: "Transaction", rt: "User", target: "User")
  category: Category
    @relation(source: "Transaction", rt: "Category", target: "Category")
  amount: Int @search
  date: DateTime
}

type Category
  @auth(
    query: """
    (Or
    [Not[has_out[RT.User]]]
    [Z >> RT.User >> RT.Email
    | value
    | equals[info.context
              | get_in[('auth', 'email')][None]
              | collect]])
    """
    update: """
    (Z >> RT.User >> RT.Email
    | value
    | equals[info.context
              | get_in[('auth', 'email')][None]
              | collect])
    """
  ) {
  user: User @relation(source: "Category", rt: "User", target: "User")
  transactions: [Transaction]
    @incoming
    @relation(source: "Transaction", rt: "Category", target: "Category")
  name: String
  icon: String
  created: DateTime
}
